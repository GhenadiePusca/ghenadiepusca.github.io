<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GP on Ghenadie Pusca</title>
    <link>/</link>
    <description>Recent content in GP on Ghenadie Pusca</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020, Ghenadie Pusca; all rights reserved.</copyright>
    <lastBuildDate>Mon, 20 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>If expression in Swift [SICP 1]</title>
      <link>/blog/if_expressions/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/if_expressions/</guid>
      <description>This blogpost is a part of going through the SICP book, you can get a free copy from:
https://web.mit.edu/alexmv/6.037/sicp.pdf
I&amp;rsquo;ve started to be interested in functional programming principles some time ago. I&amp;rsquo;ve learned from here and there, getting to know more and more, about functional programming. And to be fair, I want to continue getting more advanced with FP. As we saw in two previous introductory posts, Swift allows us to also do functional programming, and that it can blend quite well in OOP world.</description>
    </item>
    
    <item>
      <title>Functions in Swift Part 2</title>
      <link>/blog/functions_in_swift_p2/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/functions_in_swift_p2/</guid>
      <description>In previous post we&amp;rsquo;ve started covering the basics of what functions can do. In this post we&amp;rsquo;ll start doing more advanced things.
Function as return type of another function Functions can return another function as a result. In this case it will act more as a builder - the primary function being an instantiator of the function to be returned:
func makePrinter(withPrefix: String) -&amp;gt; (String) -&amp;gt; Void { return { append in print(prefix + append) } } // or func makePrinter(withPrefix: String) -&amp;gt; (String) -&amp;gt; Void { /// Also known in swift as nested function func show(_ append: String) { print(prefix + append) } return show } let printer = makePrinter(withPrefix: &amp;#34;Hello&amp;#34;) printer(&amp;#34;World&amp;#34;) /// prints - Hello World printer(&amp;#34;Coders&amp;#34;) /// prints - Hello coders To make a reference to OOP, the code above can be translated as:</description>
    </item>
    
    <item>
      <title>Functions in Swift Part 1</title>
      <link>/blog/functions_in_swift_p1/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/functions_in_swift_p1/</guid>
      <description>Swift is a multi-paradigm language, in light terms meaning you can do both Object Oriented Programming and Functional Programming. Even though it can do both, and even at the same time, in same program, we usually focus most of our attention and care to Object Oriented part, and ignoring, leaving or take it as granted what functions can offer. And functions have to offer a lot. In this post we&amp;rsquo;ll take a high level look what functions can do, beyond their normal usage.</description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>Hugo is the world’s fastest framework for building websites. It is written in Go.
It makes use of a variety of open source projects including:
 https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Learn more and contribute on GitHub.</description>
    </item>
    
  </channel>
</rss>